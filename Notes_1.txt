The code snippet in the image retrieves a dboentityid using a select query and then checks if it's not null before building and executing a delete query. This can be refactored into a single statement using conditional logic within the delete statement.


delete from etl.Document ToDboEntityXref
where DataSource = @Schema 
  and DataSourceEntityName = @Table
  and DataSourceEntityID = cast(@PrimaryKeyValue as varchar(10))
  and exists (select @Table + 'ID' from dbo.@Table where @Table + 'ID' = cast(@DboEntityID as varchar(10)) and DeleteDttm is not null);
  
  
The logic remains the same: it deletes from the etl.Document ToDboEntityXref table based on the conditions. The  exists clause ensures that only rows with a corresponding entry in the dbo table (identified by @Table) with a DeleteDttm that's not null are deleted.

In essence, this refactored code combines the functionality of the original select query and the if-else statement into a single delete statement with a condition.
