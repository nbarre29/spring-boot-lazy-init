import java.io.FileNotFoundException;

import org.json.simple.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ValidatePdfController {

    private static final int MAX_TRANSACTION_ID_LENGTH = 50;

    @PostMapping(value = "/validate", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.BAD_REQUEST) // Set default response to 400 Bad Request
    public String validatePdf(@RequestParam("file") String filePath,
                             @RequestParam(value = "transactionId") String transactionId) throws Exception {

        if (transactionId.length() > MAX_TRANSACTION_ID_LENGTH) {
            throw new IllegalArgumentException("TransactionId cannot exceed " + MAX_TRANSACTION_ID_LENGTH + " characters.");
        }

        JSONObject result = new JSONObject();
        JSONObject status = new JSONObject();

        result.put("Status", status);
        result.put("TransactionId", transactionId);

        try {
            // logic to validate PDF goes here
        } catch (Exception e) {

        } else if (e instanceof FileNotFoundException) {
            status.put("Code", "Error");
            status.put("Description", "FileNotFound");
        }

        return result.toJSONString(); // Assuming successful validation returns the JSON
    }

}

_____________________________________________________________________

To validate that the transactionId has a maximum length of 50 characters and to return a 400 Bad Request response if it exceeds this length, you need to perform the validation at the beginning of the method and use the ResponseEntity class to set the HTTP status code and response body. Here is the updated code:

import java.io.FileNotFoundException;
import org.json.simple.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ValidatePdfController {

    @PostMapping(value = "/validate", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> validatePdf(@RequestParam("file") String filePath,
                                              @RequestParam(value = "transactionId") String transactionId) throws Exception {

        // Validate the transactionId length
        if (transactionId.length() > 50) {
            JSONObject errorResponse = new JSONObject();
            JSONObject status = new JSONObject();
            status.put("Code", "Error");
            status.put("Description", "TransactionId length exceeds 50 characters");
            errorResponse.put("Status", status);
            return new ResponseEntity<>(errorResponse.toJSONString(), HttpStatus.BAD_REQUEST);
        }

        JSONObject result = new JSONObject();
        JSONObject status = new JSONObject();

        result.put("Status", status);
        result.put("TransactionId", transactionId);

        try {
            // logic to validate PDF goes here
            // If PDF is valid
            status.put("Code", "Success");
            status.put("Description", "PDF is valid");
        } catch (FileNotFoundException e) {
            status.put("Code", "Error");
            status.put("Description", "FileNotFound");
        } catch (Exception e) {
            status.put("Code", "Error");
            status.put("Description", e.getMessage());
        }

        return new ResponseEntity<>(result.toJSONString(), HttpStatus.OK);
    }
}

