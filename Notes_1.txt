The code snippet in the image retrieves a dboentityid using a select query and then checks if it's not null before building and executing a delete query. This can be refactored into a single statement using conditional logic within the delete statement.


delete from etl.Document ToDboEntityXref
where DataSource = @Schema 
  and DataSourceEntityName = @Table
  and DataSourceEntityID = cast(@PrimaryKeyValue as varchar(10))
  and exists (select @Table + 'ID' from dbo.@Table where @Table + 'ID' = cast(@DboEntityID as varchar(10)) and DeleteDttm is not null);
  
  
The logic remains the same: it deletes from the etl.Document ToDboEntityXref table based on the conditions. The  exists clause ensures that only rows with a corresponding entry in the dbo table (identified by @Table) with a DeleteDttm that's not null are deleted.

In essence, this refactored code combines the functionality of the original select query and the if-else statement into a single delete statement with a condition.


DELETE FROM etl.DocumentToDboEntityXref
WHERE DataSource = @Schema 
  AND DataSourceEntityName = @Table
  AND DataSourceEntityID = cast(@PrimaryKeyValue as varchar(10))
  AND DboEntityID = (
    SELECT TOP 1 DboEntityID
    FROM dbo.@Table
    WHERE (@Table + 'ID') = cast(@PrimaryKeyValue as varchar(10))
    AND DeleteDttm IS NULL
  );

DELETE: This clause specifies the table (etl.DocumentToDboEntityXref) from which rows will be deleted.
WHERE: This clause defines the conditions for deleting rows:
DataSource = @Schema: Filters based on the provided schema name.
DataSourceEntityName = @Table: Filters based on the provided table name.
DataSourceEntityID = cast(@PrimaryKeyValue as varchar(10)): Filters based on the primary key value from the source table.
Conditional DboEntityID:
(SELECT TOP 1 DboEntityID ...): This subquery retrieves the DboEntityID from the dbo table.
TOP 1: Ensures only the first matching record is considered.
FROM dbo.@Table: Selects from the dbo schema with the provided table name.
WHERE (@Table + 'ID') = cast(@PrimaryKeyValue as varchar(10)): Filters based on the primary key value in the dbo table.
AND DeleteDttm IS not NULL: Ensures the DeleteDttm in the dbo table is not null (meaning the record hasn't been marked for deletion).
DboEntityID = ( ... ): The outer query checks if the retrieved DboEntityID from the subquery matches the existing DboEntityID in the etl.DocumentToDboEntityXref table.



DeleteDttm IS NOT NULL: This condition in the subquery ensures it retrieves only records from the dbo table where the DeleteDttm is not null. This aligns with the logic from the image where you want to delete rows based on a non-null DeleteDttm.

retrieves the DboEntityID only if the corresponding record in the dbo table has a DeleteDttm that's not null. The DboEntityID is then used to conditionally delete the row from the etl.DocumentToDboEntityXref table.

