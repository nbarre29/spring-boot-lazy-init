-> The spread operator (...) in TypeScript is a powerful syntax that allows you to expand or unpack elements of an array, object, or iterable. Below are examples of how to use the spread operator effectively in TypeScript:
1. Expanding Arrays
Example: Combine Arrays

const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combined = [...arr1, ...arr2];

console.log(combined); // Output: [1, 2, 3, 4, 5, 6]

Example: Copy Arrays

const original = [1, 2, 3];
const copy = [...original];

console.log(copy); // Output: [1, 2, 3]


2. Expanding Objects
Example: Merge Objects

const obj1 = { name: "Alice", age: 25 };
const obj2 = { job: "Engineer", country: "USA" };
const merged = { ...obj1, ...obj2 };

console.log(merged); 
// Output: { name: "Alice", age: 25, job: "Engineer", country: "USA" }

Example: Clone Objects

const original = { name: "Bob", age: 30 };
const copy = { ...original };

console.log(copy); // Output: { name: "Bob", age: 30 }


3. Using Spread with Function Arguments
Example: Passing Array Elements as Arguments

function add(a: number, b: number, c: number): number {
  return a + b + c;
}

const numbers: [number, number, number] = [10, 20, 30];
console.log(add(...numbers)); // Output: 60


4. Adding Elements to Arrays
Example: Adding Elements to the Beginning or End

const arr = [2, 3, 4];
const newArr = [1, ...arr, 5];

console.log(newArr); // Output: [1, 2, 3, 4, 5]


5. Overriding Object Properties
Example: Overwriting Values in Merged Objects

const defaultSettings = { theme: "light", notifications: true };
const userSettings = { theme: "dark" };
const settings = { ...defaultSettings, ...userSettings };

console.log(settings); 
// Output: { theme: "dark", notifications: true }

___________________________________________________________________________

-> Here are some practical TypeScript examples of using the rest operator (...) in different contexts:
1. Rest Operator in Array Destructuring

The rest operator gathers the remaining elements of an array into a new array.
Example:

const numbers = [1, 2, 3, 4, 5];
const [first, second, ...rest] = numbers;

console.log(first); // Output: 1
console.log(second); // Output: 2
console.log(rest); // Output: [3, 4, 5]


2. Rest Operator in Function Parameters

The rest operator allows a function to accept a variable number of arguments as an array.
Example:

function sum(...nums: number[]): number {
    return nums.reduce((total, num) => total + num, 0);
}

console.log(sum(1, 2, 3)); // Output: 6
console.log(sum(4, 5, 6, 7)); // Output: 22


3. Rest Operator in Object Destructuring

The rest operator can be used to extract properties from an object while collecting the remaining properties into another object.
Example:

const person = { name: 'Alice', age: 30, country: 'USA' };
const { name: personName, ...details } = person;

console.log(personName); // Output: Alice
console.log(details); // Output: { age: 30, country: 'USA' }


4. Combining Rest with Default Parameters

You can combine the rest operator with default parameters in functions.
Example:

function greet(greeting: string, ...names: string[]): void {
  names.forEach((name) => console.log(`${greeting}, ${name}!`));
}

greet('Hello', 'Alice', 'Bob', 'Charlie');
// Output:
// Hello, Alice!
// Hello, Bob!
// Hello, Charlie!
___________________________________________________________________________

-> In TypeScript, the forEach method can be used to iterate over elements of different collection types, such as arrays, Set, and Map. Below is a demonstration for each collection type:
1. Using forEach with Arrays

const numbers: number[] = [1, 2, 3, 4, 5];

numbers.forEach((num, index) => {
  console.log(`Index: ${index}, Value: ${num}`);
});

Output:

Index: 0, Value: 1
Index: 1, Value: 2
Index: 2, Value: 3
Index: 3, Value: 4
Index: 4, Value: 5

2. Using forEach with a Set

const uniqueNumbers: Set<number> = new Set([10, 20, 30, 40, 50]);

uniqueNumbers.forEach((value) => {
  console.log(`Value: ${value}`);
});


Output:

Value: 10
Value: 20
Value: 30
Value: 40
Value: 50


2a. The Set object in JavaScript does not have an index. Unlike arrays, Set objects are collections of unique values and do not maintain an order or index for their elements.

If you need to access elements by index, you should use an array. If you need to maintain uniqueness and still want to access elements by index, you can convert the Set to an array:

In this example, numbersArray is an array created from the Set, and you can access its elements by index starting from 0.


const uniqueNumbers: Set<number> = new Set([10, 20, 3, 4, 5]);
const numbersArray = Array.from(uniqueNumbers);

console.log(numbersArray[0]); // Output: 10
console.log(numbersArray[1]); // Output: 20


3. Using forEach with a Map

const userRoles: Map<string, string> = new Map([
  ['Alice', 'Admin'],
  ['Bob', 'User'],
  ['Charlie', 'Guest'],
]);

userRoles.forEach((value, key) => {
  console.log(`Key: ${key}, Value: ${value}`);
});

Output:

Key: Alice, Value: Admin
Key: Bob, Value: User
Key: Charlie, Value: Guest
___________________________________________________________________________

-> Here are some examples of using the Array.prototype.splice() method in TypeScript. The splice() method modifies an array by adding, removing, or replacing elements and returns an array of removed elements.

Example 1: Remove Elements

let fruits: string[] = ["apple", "banana", "cherry", "date"];

// Remove 2 elements starting from index 1
let removedFruits: string[] = fruits.splice(1, 2);

console.log(fruits); // ["apple", "date"]
console.log(removedFruits); // ["banana", "cherry"]


Example 2: Add Elements

let numbers: number[] = [1, 2, 5, 6];

// Add elements 3 and 4 at index 2
numbers.splice(2, 0, 3, 4);

console.log(numbers); // [1, 2, 3, 4, 5, 6]


Example 3: Replace Elements

let colors: string[] = ["red", "green", "blue", "yellow"];

// Replace 2 elements starting from index 1 with "purple" and "orange"
colors.splice(1, 2, "purple", "orange");

console.log(colors); // ["red", "purple", "orange", "yellow"]


Example 4: Remove All Elements After a Certain Index

let items: string[] = ["a", "b", "c", "d", "e"];

// Remove all elements after index 2
items.splice(2);

console.log(items); // ["a", "b"]

Explanation:
the splice method has the signature:  array.splice(start: number, deleteCount?: number, ...itemsToInsert: T[]): T[];

    start: The index at which to begin changes.
    deleteCount (optional): How many elements to remove from that start index.
    itemsToInsert (optional): Elements to insert starting at start index.

If deleteCount is omitted (or is larger than the number of remaining elements), it defaults to removing all elements from start to the end of the array.

Thatâ€™s why splice(2) without a second parameter removes everything starting from index 2 to the end of ["a", "b", "c", "d", "e"], leaving you with ["a", "b"].


Example 5: Add and Remove Simultaneously

let techStack: string[] = ["HTML", "CSS", "JavaScript"];

// Replace "CSS" with "TypeScript" and add "React" after it
techStack.splice(1, 1, "TypeScript", "React");

console.log(techStack); // ["HTML", "TypeScript", "React", "JavaScript"]


Example 6: Remove the Last Element

let animals: string[] = ["cat", "dog", "rabbit"];

// Remove the last element
let lastAnimal = animals.splice(-1, 1);

console.log(animals); // ["cat", "dog"]
console.log(lastAnimal); // ["rabbit"]


Example 7: Insert at the Beginning

let numbers: number[] = [2, 3, 4];

// Add 0 and 1 at the start
numbers.splice(0, 0, 0, 1);

console.log(numbers); // [0, 1, 2, 3, 4]
___________________________________________________________________________

-> Rest Operator: Used in the function definition to collect multiple arguments into an array.

function greet(greeting: string, ...names: string[]) {
  return greeting + ' ' + names.join(', ') + '!';
}

console.log(greet('Hello', 'Alice', 'Bob', 'Charlie')); // Hello Alice, Bob, Charlie!
console.log(greet('Hello', 'Alice')); // Hello Alice!
console.log(greet('Hello')); // Hello !
___________________________________________________________________________

-> This demonstrates how both the rest and spread operators can be used together

function sum(...theArgs: number[]): number {
  let total = 0;
  for (const arg of theArgs) {
    total += arg;
  }
  return total;
}

console.log(sum(1, 2, 3));

const numArray = [1, 2, 3, 4];
console.log(sum(...numArray));

Rest operator: Used in the function definition to collect multiple arguments into an array.
Spread operator: Used when calling the function to expand an array into individual elements.
___________________________________________________________________________
