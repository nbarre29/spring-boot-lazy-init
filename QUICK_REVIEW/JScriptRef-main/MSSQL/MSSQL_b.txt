-> https://www.youtube.com/watch?v=1fopoivF2ws&t=301s (Stored procedure that uses a User-Defined TABLE TYPE or Table-Valued parameters in SQL Server 2019.)

My Observation:
There's a mismatch in the structure of your table type and the corresponding table. i.e. In the table types few columns are missing due to which we might see some warnings.
Still this example is a good way to understand the concept.
When using table-valued parameters in SQL Server, the structure of the table type should match the structure of the table you intend to use it with.

   
CREATE DATABASE MyDB;

use MyDB;

create table PurchaseOrder
(
	row_id				bigint			identity(1,1) not null primary key,
	po_order_id			bigint			not null,
	order_date			date			not null,
	customer_id			int				not null,
	order_total_cost	decimal(10,2)   default 0.00,
	create_date			datetime		not null,
	create_user			nvarchar(30)	not null,
	update_date			datetime,
	update_user			nvarchar(30)
);


create table PODetailLines
(
	po_order_id			bigint not null,
	line_number			int	not null,
	item_id				int not null,
	qty					int not null,
	unit_price			decimal(10,2),
	item_description	nvarchar(100),
	line_total_cost		decimal(10,2),
	row_ts				timestamp,
	create_date			datetime		not null,
	create_user			nvarchar(30)	not null,
	update_date			datetime,
	update_user			nvarchar(30)
);


create type PurchaseOrderType as Table
(
	po_order_id			bigint			not null,
	order_date			datetime		not null,
	customer_id			int				not null,
	order_total_cost	decimal(10,2),
	create_date			datetime		not null,
	create_user			nvarchar(30)	not null
);


create type PODetailType as Table
(
	po_order_id			bigint not null,
	line_number			int	not null,
	item_id				int not null,
	qty					int not null,
	unit_price			decimal(10,2),
	item_description	nvarchar(100),
	line_total_cost		decimal(10,2),
	create_user			nvarchar(30)
);
----------------------------------------------------------
create procedure PROC_SaveShoppingCartOrder
(
	@master		PurchaseOrderType	READONLY,
	@details	PODetailType		READONLY
)
as
/*
	history
	9/2/2021  programmer-name	save order to PurchaseOrder - @master
								save details to PODetailLines @details
*/
begin

	declare @po_order_id bigint = (select po_order_id from @master)

	begin tran

		insert into PurchaseOrder(
				po_order_id, order_date, customer_id, order_total_cost,
				create_date, create_user)
		select
				po_order_id, order_date,  customer_id, order_total_cost,
				create_date, create_user
		from	@master;



		insert into PODetailLines ( 
				po_order_id,	line_number,	item_id,
				qty,			unit_price,		item_description, 
				line_total_cost,create_date,	create_user)
		select 
				po_order_id,	line_number,	item_id,
				qty,			unit_price,		item_description, 
				line_total_cost, getdate(),		create_user
		from	@details


		declare @order_total decimal(10,2) = 
			(select sum(line_total_cost) from @details);

		update PurchaseOrder
		set order_total_cost = @order_total
		where po_order_id = @po_order_id;

	commit;
end;

----------------------------------------------------------

--a customer is using the web site
--they are selecting items, and adding
--to their shopping cart
declare @master as PurchaseOrderType;
insert into @master
(
	po_order_id,			
	order_date	,		
	customer_id	,		
	order_total_cost,	
	create_date,
	create_user
)
values
(	10000100,
	cast(getdate() as date),
	15001,
	0,
	getdate(),
	N'person name'
)

--select * from @master


declare @details as PODetailType;
insert into @details
(
	po_order_id,		
	line_number,		
	item_id,			
	qty,				
	unit_price,		
	item_description,
	line_total_cost,
	create_user
)
values

(10000100, 1, 14, 1, 23.55, N'yard rake',	23.55,	N'person name'),
(10000100, 2, 73, 1, 43.55, N'shovel',		43.55,	N'person name'),
(10000100, 3, 86, 2, 19.55, N'yard gloves', 39.10,	N'person name'),
(10000100, 4, 33, 12, 7.99, N'plant',		95.88,	N'person name'),
(10000100, 5, 61, 2, 29.99, N'water hose',	59.98,	N'person name')

select * from @details


exec PROC_SaveShoppingCartOrder @master, @details

use mydb;

select * from PurchaseOrder

select * from PODetailLines
___________________________________________________________

-> https://www.youtube.com/watch?v=B7CVo-Vu7gU (SQL 2019 Tutorials | Output Clause in SQL | sql output clause | query result in sql)

CREATE TABLE Emp (
    IdEmp INT,
    EmpName VARCHAR(MAX),
    Location VARCHAR(MAX),
    DeptId INT
);

insert into Emp values(101,'John','UK',10)

insert into Emp (IdEmp, EmpName,Location,DeptId) 
output inserted.*
values(102,'Kate','USA',20)


insert into Emp (IdEmp, EmpName,Location,DeptId) 
output inserted.*
values(103,'Raj','INDIA',20),
(104,'Jeevan','INDIA',30)
----------------------------------------------------------

https://www.youtube.com/watch?v=KPn1xbYFVnY (SQL 2019 Tutorial| Delete with output clause in SQL | Delete rows in sql with output | output delete)

delete from emp 
output deleted.*
where IdEmp=101

----------------------------------------------------------
https://www.youtube.com/watch?v=4inDcGZEMA0 (Update with output clause)

update emp set Location='UAE' where IdEmp=101

update emp set Location='UK'
output inserted.IdEmp, deleted.Location 'Old Location', inserted.Location as 'New Location'
___________________________________________________________

-> https://www.youtube.com/watch?v=Ewf5bivTKdI&t=316s (Table valued parameters in SQL Server)

Table Valued Parameter is a new feature introduced in SQL SERVER 2008. Table Valued Parameter allows a table (i.e multiple rows of data) to be passed as a parameter to a stored procedure from T-SQL code or from an application. Prior to SQL SERVER 2008, it is not possible to pass a table variable as a parameter to a stored procedure.

Let us understand how to pass multiple rows to a stored procedure using Table Valued Parameter with an example. We want to insert multiple rows into the following Employees table. 

SQL Script to create the Employees table
Create Table Employees
(
 Id int primary key,
 Name nvarchar(50),
 Gender nvarchar(10)
)
Go

Step 1 : Create User-defined Table Type

CREATE TYPE EmpTableType AS TABLE
(
 Id INT PRIMARY KEY,
 Name NVARCHAR(50),
 Gender NVARCHAR(10)
)
Go

Step 2 : Use the User-defined Table Type as a parameter in the stored procedure. Table valued parameters must be passed as read-only to stored procedures, functions etc. This means you cannot perform DML operations like INSERT, UPDATE or DELETE on a table-valued parameter in the body of a function, stored procedure etc.

CREATE PROCEDURE spInsertEmployees
@EmpTableType EmpTableType READONLY
AS
BEGIN
 INSERT INTO Employees
 SELECT * FROM @EmpTableType
END

Step 3 : Declare a table variable, insert the data and then pass the table variable as a parameter to the stored procedure.

DECLARE @EmployeeTableType EmpTableType 

INSERT INTO @EmployeeTableType VALUES (1, 'Mark', 'Male')
INSERT INTO @EmployeeTableType VALUES (2, 'Mary', 'Female')
INSERT INTO @EmployeeTableType VALUES (3, 'John', 'Male')
INSERT INTO @EmployeeTableType VALUES (4, 'Sara', 'Female')
INSERT INTO @EmployeeTableType VALUES (5, 'Rob', 'Male')

EXECUTE spInsertEmployees @EmployeeTableType
___________________________________________________________

-> https://www.youtube.com/watch?v=AzkHAO4JzNQ (Coalesce function)
According to the MSDN Books online COALESCE() returns the first Non NULL value. Let's understand this with an example.


Consider the Employees Table below. Not all employees have their First, Midde and Last Names filled. Some of the employees has First name missing, some of them have Middle Name missing and some of them last name.


-- Create table
CREATE TABLE tblEmployee (
    Id INT PRIMARY KEY,
    FirstName NVARCHAR(50),
    MiddleName NVARCHAR(50),
    LastName NVARCHAR(50)
);

-- Insert values
INSERT INTO tblEmployee (Id, FirstName, MiddleName, LastName)
VALUES 
    (1, 'Sam', NULL, NULL),
    (2, NULL, 'Todd', 'Tanzan'),
    (3, NULL, NULL, 'Sara'),
    (4, 'Ben', 'Parker', NULL),
    (5, 'James', 'Nick', 'Nancy');


select Id,COALESCE(FirstName,MiddleName,LastName) as Name from tblEmployee
___________________________________________________________
-> Table variable:


-> Example 1: Creating and populating a table variable

 DECLARE @CustomerTable TABLE (
  CustomerID INT PRIMARY KEY,
  Name VARCHAR(50) NOT NULL,
  Email VARCHAR(100) UNIQUE
);

INSERT INTO @CustomerTable (CustomerID, Name, Email)
VALUES (1, 'John Doe', 'john.doe@example.com'),
       (2, 'Jane Doe', 'jane.doe@example.com');

SELECT * FROM @CustomerTable;


Table variables are local to the specific batch, function, or stored procedure where they are declared. They don't exist as separate database objects like user-defined tables / table types. Therefore, you can only manipulate them within that specific execution context.

Remember, table variables are convenient for temporary data within a single execution, while table types offer more flexibility and reusability but require additional upfront definition.

----------------------------------------------------------
-> Example 2: Using a table variable in a stored procedure

example of a stored procedure in Microsoft SQL Server that creates a table variable, inserts data into it, and then selects the data from the table variable:

-- Create a stored procedure
CREATE PROCEDURE SampleStoredProcedure
AS
BEGIN
    -- Declare a table variable
    DECLARE @MyTableVariable TABLE
    (
        ID INT,
        Name NVARCHAR(50)
    );

    -- Insert data into the table variable
    INSERT INTO @MyTableVariable (ID, Name)
    VALUES (1, 'John'), (2, 'Jane'), (3, 'Doe');

    -- Select data from the table variable
    SELECT * FROM @MyTableVariable;
END;


-- Execute the stored procedure
EXEC SampleStoredProcedure;


It's important to note that while table variables have some advantages, they are not always the best choice for every scenario. In some cases, temporary tables or table types might be more suitable, especially when dealing with larger result sets, the need for indexing, or the requirement for a broader scope. The choice between table variables and other temporary storage methods depends on the specific requirements and characteristics of your data and application.

___________________________________________________________

