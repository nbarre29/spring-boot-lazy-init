-> you can use the spread operator (...) to copy the elements of an array to another array. 

1) Basic Array Copy
const originalArray: number[] = [1, 2, 3, 4, 5];
const copiedArray: number[] = [...originalArray];
console.log(copiedArray); // Output: [1, 2, 3, 4, 5]

2) Concatenating Arrays
const array1: string[] = ["a", "b", "c"];
const array2: string[] = ["d", "e", "f"];
const concatenatedArray: string[] = [...array1, ...array2];
console.log(concatenatedArray); // Output: ['a', 'b', 'c', 'd', 'e', 'f']

3) Adding an Element to a Copied Array
const originalArray: number[] = [1, 2, 3];
const newArray: number[] = [...originalArray, 4];
console.log(newArray); // Output: [1, 2, 3, 4]

4) Copying and Modifying an Element
const originalArray: number[] = [1, 2, 3];
// Replace the element at index 1 with 99
const modifiedArray: number[] = [...originalArray.slice(0, 1), 99, ...originalArray.slice(2)];
console.log(modifiedArray); // Output: [1, 99, 3]

...originalArray.slice(0, 1): This part uses the spread operator to copy the elements from originalArray starting from index 0 up to, but not including, index 1. In this case, it copies the element at index 0 (1).

99: This is a new element added to the modified array.

...originalArray.slice(2): This part uses the spread operator to copy the elements from originalArray starting from index 2 to the end. It copies the element at index 2 (3).


5) Copying an Array of Objects

interface Person {
  name: string;
  age: number;
}

const originalArray: Person[] = [
  { name: "Alice", age: 25 },
  { name: "Bob", age: 30 },
];
const copiedArray: Person[] = [...originalArray];

console.log(copiedArray); // Output: [ { name: 'Alice', age: 25 }, { name: 'Bob', age: 30 } ]


_______________________________________________________________
-> Array.prototype.slice()

const animals: string[] = ["ant", "bison", "camel", "duck", "elephant"];

console.log(animals.slice(2)); //[ 'camel', 'duck', 'elephant' ]
console.log(animals.slice(2, 4)); //[ 'camel', 'duck' ]
console.log(animals.slice(1, 5)); //[ 'bison', 'camel', 'duck', 'elephant' ]
_______________________________________________________________

-> some operations using spread / rest operator ( ... )

1) Modify Object properties.
interface Fruit {
  name: string;
  color: string;
  taste?: string;
}

const originalFruit: Fruit = { name: "Apple", color: "Red" };

const ModifiedFruit: Fruit = {
  ...originalFruit,
  color: "Green", // Modify the color
  taste: "Sweet", // Add a new property
};

console.log(ModifiedFruit); //  { name: 'Apple', color: 'Green', taste: 'Sweet' }

2) Omitting Properties 

interface Car {
  brand: string;
  model: string;
  year: number;
}

const car: Car = { brand: "Toyota", model: "Camry", year: 2022 };

const { year, ...carWithoutYear } = car;

console.log(carWithoutYear);  // { brand: 'Toyota', model: 'Camry' }
console.log(year);	 // 2022

To exclude properties of an object using destructuring assignment, you can combine the object destructuring syntax with the rest operator

3) Merge Objects

interface Person {
  name: string;
  age: number;
}

const person1: Person = { name: "Alice", age: 25 };
const person2: Person = { name: "Bob", age: 30 };

const mergedPerson: Person = { ...person1, ...person2 };

console.log(mergedPerson); // { name: 'Bob', age: 30 }

The statement console.log(mergedPerson); does not contain any reference to person1. This is because the spread operator (...) prioritizes properties from the later object when there are duplicates. In this case, person2 is the later object, so its properties overwrite any conflicting properties from person1.

Therefore, the mergedPerson object only contains the properties from person2
_______________________________________________________________

-> rest and spread operator ( ... )
Remember that while they share the same syntax (...), their behavior depends on the context in which they are used. 

1) Rest Operator:

a) Rest parameter in function:
function sum(...numbers: number[]): number {
  return numbers.reduce((total, num) => total + num, 0);
}

const result = sum(1, 2, 3, 4, 5);
console.log(result); // Output: 15


b) Rest in Array Destructuring
const [first, second, ...restOfNumbers] = [1, 2, 3, 4, 5];
console.log(first); // Output: 1
console.log(second); // Output: 2
console.log(restOfNumbers); // Output: [3, 4, 5]


2) Spread Operator:
The spread operator is used to spread elements from an array or properties from an object into another array or object. It's often used for creating shallow copies or combining multiple arrays/objects.

a) Spread in Array
const array1: number[] = [1, 2, 3];
const array2: number[] = [...array1, 4, 5, 6];
console.log(array2); // Output: [1, 2, 3, 4, 5, 6]

b) Spread in Object
const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3, d: 4 };
console.log(obj2); // Output: { a: 1, b: 2, c: 3, d: 4 }


//Typescript
const obj1: { a: number; b: number } = { a: 1, b: 2 };
const obj2: { a: number; b: number; c: number; d: number } = { ...obj1, c: 3, d: 4 };
console.log(obj2); // Output: { a: 1, b: 2, c: 3, d: 4 }

_______________________________________________________________
-> The rest operator is used to represent an indefinite number of arguments as an array. It is typically used in function parameters to gather the remaining parameters into an array.

function sum(...numbers: number[]): number {
  return numbers.reduce((total, num) => total + num, 0);
}

const result = sum(1, 2, 3, 4, 5);
console.log(result); // Output: 15


-> The spread operator is used to spread elements of an array or object. It can be used in various contexts, such as spreading elements into a new array, merging arrays, or creating a shallow copy of an object.

// Spread elements of an array
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5];
console.log(arr2); // Output: [1, 2, 3, 4, 5]

// Spread elements of an object
const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3 };
console.log(obj2); // Output: { a: 1, b: 2, c: 3 }


-> Differences
Context:
Rest operator: Typically used in function parameters to collect parameters into an array.
Spread operator: Used to spread elements of an array or object.

Usage:
Rest operator: Used in function parameters.
Spread operator: Used in array literals, object literals, and function arguments.

Effect:
Rest operator: Gathers elements into an array.
Spread operator: Spreads elements from an array or object.


-> Combined Example:

// Rest operator in function parameters
function exampleFunction(firstParam: string, ...restParams: number[]): void {
  console.log(firstParam); // one
  console.log(restParams); // [2, 3, 4]
}

// Spread operator in function arguments
const numbers = [2, 3, 4];
exampleFunction("one", ...numbers);


In this combined example, the rest operator is used in the function parameter to collect the remaining parameters into an array, and the spread operator is used in the function argument to spread the elements of the numbers array as individual arguments.
_______________________________________________________________

-> Examples of Array.reduce() 

a) Summing all the elements in an array:

const numbers: number[] = [1, 2, 3, 4, 5];
const sum: number = numbers.reduce((acc: number, num: number) => acc + num, 0);
console.log(sum); // Output: 15


b) Finding the maximum element in an array:

const numbers: number[] = [1, 2, 3, 4, 5];
const max: number = numbers.reduce(
  (max: number, num: number) => Math.max(max, num),
  0
);
console.log(max); // Output: 5


c) Filtering an array based on a condition:

const numbers: number[] = [1, 2, 3, 4, 5, 6, 7, 8];
const evenNumbers: number[] = numbers.reduce((acc: number[], num: number) => {
  if (num % 2 === 0) {
    acc.push(num);
  }
  return acc;
}, []);
console.log(evenNumbers); // [ 2, 4, 6, 8 ]


d) Creating an object from an array of objects:

interface User {
  name: string;
  age: number;
}

const users: User[] = [
  { name: "John", age: 30 },
  { name: "Jane", age: 25 },
  { name: "Mike", age: 35 },
];
const userMap: Record<string, number> = users.reduce(
  (acc: Record<string, number>, user: User) => {
    acc[user.name] = user.age;
    return acc;
  },
  {}
);
console.log(userMap); // { John: 30, Jane: 25, Mike: 35 }


e) Flattening a nested array:

const nestedArray: number[][] = [
  [1, 2],
  [3, 4],
  [5, 6],
];
const flatArray: number[] = nestedArray.reduce(
  (acc: number[], arr: number[]) => acc.concat(arr),
  []
);
console.log(flatArray); // Output: [1, 2, 3, 4, 5, 6]


f) count the occurrences of each word in an array.

const words: string[] = [
  "apple",
  "orange",
  "banana",
  "apple",
  "orange",
  "apple",
];

const wordCount: Record<string, number> = words.reduce((acc, word) => {
  acc[word] = (acc[word] || 0) + 1;
  return acc;
}, {} as Record<string, number>); // Use type assertion here

console.log(wordCount); // { apple: 3, orange: 2, banana: 1 }


Explanation of the statement: acc[word] = (acc[word] || 0) + 1;
Here, acc is the accumulator, which is an object of type Record<string, number>. word is the current element being processed in the words array during each iteration of the reduce method.

acc[word] refers to the current count of the specific word in the accumulator (acc). It's using the current word as the key to access a property in the acc object.

(acc[word] || 0) checks if the current word has been encountered before. If acc[word] is truthy (i.e., it exists), it takes that value; otherwise, it defaults to 0. This is a common pattern to handle the case when the word is encountered for the first time, ensuring that if acc[word] is undefined or null, it defaults to 0.

+ 1 increments the count by 1. It adds 1 to the value obtained in the previous step. This step ensures that each time the word is encountered, its count is incremented.

So, in summary, this line of code is updating the count of each word in the acc object. If the word has been encountered before, it increments the existing count by 1; otherwise, it starts a new count at 1. The result is a record of word counts in the acc object, where each word is a key, and the associated value is the count of occurrences.
---------------------------------------------------------------
interface WordCount {
  [key: string]: number;
}
const words: string[] = [
  "apple",
  "orange",
  "banana",
  "apple",
  "orange",
  "apple",
];

const wordCount: WordCount = words.reduce((acc: WordCount, word: string) => {
  acc[word] = (acc[word] || 0) + 1;
  return acc;
}, {});

console.log(wordCount); // { apple: 3, orange: 2, banana: 1 }
---------------------------------------------------------------
//updated the above code to use Record
const words: string[] = [
  "apple",
  "orange",
  "banana",
  "apple",
  "orange",
  "apple",
];

const wordCount: Record<string, number> = words.reduce(
  (acc: Record<string, number>, word: string) => {
    acc[word] = (acc[word] || 0) + 1;
    return acc;
  },
  {}
);

console.log(wordCount); // { apple: 3, orange: 2, banana: 1 }
_______________________________________________________________

-> https://www.youtube.com/watch?v=_e4m4DjnBCE (Stop Using {} In TypeScript)

type Param = {};

function f(obj: Param): Param {
  return obj;
}

f({ name: "Kyle" });
f(new Date());

console.log(f({ name: "Kyle" }));
console.log(f(new Date()));
---------------------------------------------------------------

type Param = Record<string, unknown>;

function f(obj: Param): Param {
  return obj;
}

f({ name: "Kyle" });
f(new Date());

console.log(f({ name: "Kyle" }));
console.log(f(new Date()));

---------------------------------------------------------------

type Param = { [index: string]: unknown };

function f(obj: Param): Param {
  return obj;
}

f({ name: new Date() });

console.log(f({ name: "Kyle" }));
_______________________________________________________________

interface MyData {
  body?: string | null;
}

function processData(data: MyData): void {
  // Optional chaining in TypeScript
  if (data.body?.includes("a")) {
    console.log('The string contains "a"');
  } else {
    console.log('The string does not contain "a" or is undefined/null');
  }
}

// Example usage:
const example1: MyData = { body: "example string" };
const example2: MyData = { body: null };
const example3: MyData = {
  /* body is undefined */
};

processData(example1);
processData(example2);
processData(example3);


In this example:
The MyData interface defines an object with an optional property body that can be a string, null, or undefined.
The processData function takes an object of type MyData and checks if the body property contains the character 'a' using optional chaining.
Three examples (example1, example2, and example3) demonstrate how the processData function can be used with different data objects.

_______________________________________________________________


_______________________________________________________________

---------------------------------------------------------------
