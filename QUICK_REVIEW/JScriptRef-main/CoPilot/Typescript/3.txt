-> demonstrates how to handle asynchronous operations using nested callbacks, which can lead to callback hell if the nesting becomes too deep.

// Simulating asynchronous operations with callbacks
function firstOperation(callback: () => void): void {
  setTimeout(() => {
    console.log('First operation completed');
    callback();
  }, 1000);
}

function secondOperation(callback: () => void): void {
  setTimeout(() => {
    console.log('Second operation completed');
    callback();
  }, 1000);
}

function thirdOperation(callback: () => void): void {
  setTimeout(() => {
    console.log('Third operation completed');
    callback();
  }, 1000);
}

// Using nested callbacks to execute operations sequentially
function executeOperations(): void {
  firstOperation(() => {
    secondOperation(() => {
      thirdOperation(() => {
        console.log('All operations completed');
      });
    });
  });
}

// Execute the operations
executeOperations();

/* 
Output:
First operation completed
Second operation completed
Third operation completed
All operations completed
*/


Explanation:

1) Function Definitions:

Each function (firstOperation, secondOperation, thirdOperation) takes a callback function as an argument.
Inside each function, setTimeout is used to simulate an asynchronous operation, and the callback is called after the operation completes.

2) Using Nested Callbacks:

The executeOperations function uses nested callbacks to ensure that the operations are executed sequentially.
firstOperation is called with a callback that calls secondOperation.
secondOperation is called with a callback that calls thirdOperation.
thirdOperation is called with a callback that logs that all operations are completed
---------------------------------------------------------------------------------
Solution: Using Promises

-> demonstrates how to use Promises with then and catch methods to handle asynchronous operations in a clean and readable manner, avoiding callback hell.

// Simulating asynchronous operations with Promises
function firstOperation(): Promise<void> {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log('First operation completed');
      resolve();
    }, 1000);
  });
}

function secondOperation(): Promise<void> {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log('Second operation completed');
      resolve();
    }, 1000);
  });
}

function thirdOperation(): Promise<void> {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log('Third operation completed');
      resolve();
    }, 1000);
  });
}

// Using Promises with thenables to avoid callback hell
function executeOperations(): void {
  firstOperation()
    .then(() => {
      return secondOperation();
    })
    .then(() => {
      return thirdOperation();
    })
    .then(() => {
      console.log('All operations completed');
    })
    .catch((error) => {
      console.error('An error occurred:', error);
    });
}

// Execute the operations
executeOperations();

/* 
Output:
First operation completed
Second operation completed
Third operation completed
All operations completed */

Explanation:
1) Function Definitions:

Each function (firstOperation, secondOperation, thirdOperation) returns a Promise<void> that resolves after a timeout, simulating an asynchronous operation.

2) Using Promises with then and catch:

The executeOperations function chains the Promises using the then method.
Each then method returns the next Promise, ensuring that the operations are executed sequentially.
The final then method logs that all operations are completed.
The catch method handles any errors that occur during the execution of the Promise

---------------------------------------------------------------------------------
Solution: Using async/await
async/await provides an even cleaner syntax for handling asynchronous operations, making the code look more like synchronous code

-> demonstrates how async/await can be used to handle asynchronous operations in a clean and readable manner, avoiding the pitfalls of callback hell.

// Simulating asynchronous operations with Promises
function firstOperation(): Promise<void> {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log('First operation completed');
      resolve();
    }, 1000);
  });
}

function secondOperation(): Promise<void> {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log('Second operation completed');
      resolve();
    }, 1000);
  });
}

function thirdOperation(): Promise<void> {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log('Third operation completed');
      resolve();
    }, 1000);
  });
}

// Using async/await to avoid callback hell
async function executeOperations(): Promise<void> {
  try {
    await firstOperation();
    await secondOperation();
    await thirdOperation();
    console.log('All operations completed');
  } catch (error) {
    console.error('An error occurred:', error);
  }
}

// Execute the operations
executeOperations();

/* 
Output:
First operation completed
Second operation completed
Third operation completed
All operations completed */


Explanation:
1) Function Definitions:

Each function (firstOperation, secondOperation, thirdOperation) returns a Promise<void> that resolves after a timeout, simulating an asynchronous operation.

2) async Function:

The executeOperations function is defined as async, allowing the use of await to wait for each Promise to resolve.
The try/catch block is used to handle any errors that occur during the execution of the Promises.

3) Using await:

The await keyword is used before each function call to pause the execution of executeOperations until the Promise returned by the function is resolved.
This makes the code look synchronous and easier to read.

4) Error Handling:
The try/catch block ensures that any errors thrown during the execution of the Promises are caught and handled appropriately.
_____________________________________________________________________________________