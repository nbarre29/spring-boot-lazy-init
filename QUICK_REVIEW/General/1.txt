->  Array declaration in javascript.

const numArray = [1,2,3];


Array declaration in Java and C# are done in the same way:
int[] numArray = {1, 2, 3};

another verbose approach:  int[] numArray = new int[]{1, 2, 3};
______________________________________________________________________

-> javascript:

const stringArray = ["apple", "banana", "cherry"];

for (const fruit of stringArray) {
  console.log(fruit);
}

----------------------------------------------------------------------

Java:

public class Main {
    public static void main(String[] args) {
        String[] stringArray = {"apple", "banana", "cherry"};

        for (String fruit : stringArray) {
            System.out.println(fruit);
        }
    }
}

----------------------------------------------------------------------
C#:

public class Program
{
    public static void Main(string[] args)
    {
        string[] stringArray = { "apple", "banana", "cherry" };
        
        foreach (string fruit in stringArray)
        {
            Console.WriteLine(fruit);
        }

    }
}

______________________________________________________________________

-> Both "" (double quotes) and '' (single quotes) represent an empty string in JavaScript/TypeScript.

Example:

const str1: string = "";
const str2: string = '';

console.log(str1.length); // Output: 0
console.log(str2.length); // Output: 0

console.log(str1 === str2); // Output: true (both are empty strings)


Key Points:

    An empty string means a string with a length of 0 ("" or '').
    "" and '' are interchangeable in JavaScript/TypeScript.
    They are not null or undefined. They are valid string values but contain no characters.
----------------------------------------------------------------------	
	
-> 	In Java, both "" (double quotes) and '' (single quotes) are not the same.

1. Empty String ("")

    "" represents an empty string in Java.
    It is a valid String object with a length of 0.
    Example:

    public class Main {
        public static void main(String[] args) {
            String str1 = ""; // Empty string
            System.out.println("Length: " + str1.length()); // Output: Length: 0
            System.out.println("Is empty: " + str1.isEmpty()); // Output: true
        }
    }

2. Single Quotes ('') Are Invalid for Strings

    In Java, single quotes ('') are used for characters (char), not strings.
    An empty char ('') is invalid in Java and will cause a compilation error.
    Example (❌ Invalid):

char ch = ''; // ERROR: Empty character literal

Correct Example (✅ Valid):

char ch = 'a'; // Single character, valid
----------------------------------------------------------------------

-> In .NET (C# and VB.NET), the handling of "" and '' is similar to Java

______________________________________________________________________

-> Declaring a Boolean Value in Java and JavaScript

In Java:

boolean isAvailable = true;  // Using primitive type
Boolean isPresent = Boolean.TRUE;  // Using Wrapper class

    boolean is a primitive type and should be preferred for performance.
    Boolean is a wrapper class (useful when working with objects or nullable values).


In JavaScript:

let isAvailable = true;  // Using 'let'
const isPresent = false; // Using 'const' (immutable)

    true and false are boolean literals.
    let allows reassignment, while const makes it immutable.
	
______________________________________________________________________

-> Declaring a String Value in Java and JavaScript

In Java:

String name = "John Doe";  // Using String (immutable)
char[] nameArray = {'J', 'o', 'h', 'n'}; // Using char array (mutable)

    String is immutable, meaning its value cannot be changed once assigned.
    char[] can be used for mutable character sequences.


If mutability is required, use StringBuilder or StringBuffer:

StringBuilder nameBuilder = new StringBuilder("John Doe");
nameBuilder.append(" Jr."); // Mutates the original value


In JavaScript:

let name = "John Doe";  // Mutable string
const greeting = "Hello, World!"; // Immutable reference

    
    Use let if you want to reassign the variable.
    Use const if the value should not change.
	
______________________________________________________________________

	
	
	

